#!/usr/bin/env php
<?php

use DTL\OneHourExp\Evaluator;
use DTL\OneHourExp\Node;
use DTL\OneHourExp\Node\BinaryOp;
use DTL\OneHourExp\Node\BinaryOpNode;
use DTL\OneHourExp\Node\IntegerNode;
use DTL\OneHourExp\Parser;
use DTL\OneHourExp\Tokenizer;

require __DIR__ . '/../vendor/autoload.php';


while (true) {
    echo info('SCALC2K $ ');
    echo "\e[36m";
    $expression = readline();
    echo "\e[0m";
    if ($expression === '') {
        continue;
    }

    if (!class_exists(Tokenizer::class)) {
        echo error(sprintf("%s does not exist\n", Tokenizer::class));
        continue;
    }

    try {

        $tokens = (new Tokenizer())->tokenize((string)$expression);
        echo "Tokens:\n\n";
        foreach ($tokens as $token) {
            echo sprintf(
                "  [%s, %s]\n",
                $token->type->name,
                (string)json_encode($token->value, JSON_UNESCAPED_SLASHES)
            );
        }
        echo "\n";

        if (!class_exists(Parser::class)) {
            echo error(sprintf("%s does not exist\n", Parser::class));
            continue;
        }

        $ast = (new Parser())->parse($tokens);
        echo "AST:\n\n";
        echo dump_ast($ast, 1);
        echo "\n";
        echo "\n";

        if (!class_exists(Evaluator::class)) {
            echo error(sprintf("%s does not exist\n", Evaluator::class));
            continue;
        }

        $result = (new Evaluator())->evaluate($ast);
        echo "Result: ";
        echo json_encode($result, JSON_UNESCAPED_SLASHES);
        echo "\n\n";
    } catch (Throwable $e) {
        echo error($e->getMessage());
    }
}

function dump_ast(Node $node, int $level = 0): string
{
    $indent = str_repeat('  ', $level);
    if ($node instanceof IntegerNode) {
        return sprintf("%sInteger(%s)", $indent, $node->value);
    }
    if ($node instanceof BinaryOp || $node instanceof BinaryOpNode) {
        return sprintf(
            "%sBinary(\n%s\n%s%s%s\n%s\n%s)",
            $indent,
            dump_ast($node->left, $level + 1),
            str_repeat('  ', $level + 1),
            $node->operator,
            $indent,
            dump_ast($node->right, $level + 1),
            $indent,
        );
    }

    throw new RuntimeException(sprintf(
        'Do not know how printer: %s',
        $node::class
    ));
}

function info(string $message): string
{
    return "\e[32m" . $message . "\e[0m";
}
function error(string $message): string
{
    return "\e[31m" . $message . "\e[0m\n";
}

